step "azure-appconfig-kv-retrieve-values" {
    name = "Azure AppConfig KV - Retrieve Values"

    action {
        properties = {
            Azure.AppConfig.KV.RetrieveValues.AzureAccount = "SnowGlobe.AzureAppConfig.Account"
            Azure.AppConfig.KV.RetrieveValues.ConfigStoreEndpoint = "#{SnowGlobe.AzureAppConfig.Endpoint}"
            Azure.AppConfig.KV.RetrieveValues.ConfigStoreName = "#{SnowGlobe.AzureAppConfig.StoreName}"
            Azure.AppConfig.KV.RetrieveValues.CreateAppSettingsJson = "False"
            Azure.AppConfig.KV.RetrieveValues.Labels = "#{Octopus.Environment.Name | ToLower}"
            Azure.AppConfig.KV.RetrieveValues.PrintVariableNames = "False"
            Azure.AppConfig.KV.RetrieveValues.RetrievalMethod = "all"
            Azure.AppConfig.KV.RetrieveValues.SaveAsSensitiveVariables = "False"
            Azure.AppConfig.KV.RetrieveValues.SuppressWarnings = "False"
            Azure.AppConfig.KV.RetrieveValues.TreatWarningsAsErrors = "True"
            Octopus.Action.Template.Id = "ActionTemplates-2842"
            Octopus.Action.Template.Version = "1"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.0.1-ubuntu.22.04"
        }
    }
}

step "create-web-app-service" {
    name = "Create Snow Globe service"
    properties = {
        Octopus.Action.TargetRoles = "demo-k8s-cluster"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        notes = "Create a Load Balancer service for the web app on the target cluster."
        properties = {
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYaml = <<-EOT
                apiVersion: v1
                kind: Service
                metadata:
                  name: '#{SnowGlobe.WebApp.ServiceName}'
                  namespace: '#{SnowGlobe.Cluster.Namespace}'
                spec:
                  type: LoadBalancer
                  ports:
                    - name: http
                      port: 80
                      targetPort: #{SnowGlobe.WebApp.HttpPort}
                      protocol: TCP
                    - name: https
                      port: 443
                      targetPort: #{SnowGlobe.WebApp.HttpsPort}
                      protocol: TCP
                  selector:
                    component: sg-web
                    type: main
                
                EOT
            Octopus.Action.KubernetesContainers.DeploymentWait = "NoWait"
            Octopus.Action.KubernetesContainers.Namespace = "#{SnowGlobe.Cluster.Namespace}"
            Octopus.Action.Script.ScriptSource = "Inline"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:5.1.0-ubuntu.22.04"
        }
    }
}